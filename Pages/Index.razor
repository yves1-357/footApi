@page "/"
@using footApi.Services
@inject FootService FootService
@using System.Globalization

<!-- CONTENT (colonne droite) -->
    <div class="content">
        <h1 style="color: darkgrey; font-weight: bold;">Le Onze</h1>

        <!-- Navigation des jours -->
        <div class="date-navigation">
            <button @onclick="PreviousDay" class="btn btn-success" style="background-color: green"> ◀ </button>

            <span class="selected-date" style="font-size: 18px; font-weight:bold;">
                @currentDateText
            </span>

            <button @onclick="NextDay" class="btn btn-success" style="background-color: green"> ▶ </button>

            <button @onclick="LoadTodayMatches" class="btn @(showTodayMatches ? "btn-primary" : "")">
                Today
            </button>

            <button @onclick="LoadLiveMatches" class="btn @(showLiveMatches ? "btn-danger" : "")" style="background-color: darkred">
                Live
            </button>
        </div>

        <!-- Filtres Homme/Femme -->
        <div class="filters">
            <button @onclick="ShowAllMatches" class="@("btn " + (selectedCategory == "All" ? "btn-dark": ""))">
                Tout 
            </button>
            <button @onclick="ShowFemaleMatches" class="@("btn " + (selectedCategory == "Female" ? "btn-danger" : ""))">
                Femmes
            </button>
            <button @onclick="ShowMaleMatches" class="@("btn " + (selectedCategory == "Male" ? "btn-primary" : ""))">
                Hommes
            </button>
        </div>

        @if (matches == null || matches.Count == 0)
        {
            <p>Chargement des matchs...</p>
        }
        else
        {
            @foreach (var leagueGroup in filteredMatches.GroupBy(m => new { m.League.Name, m.League.Country, m.League.Logo }))
            {
                <h2>
                    @if (!string.IsNullOrEmpty(leagueGroup.Key.Logo))
                    {
                        <img src="@leagueGroup.Key.Logo" width="30"/>
                    }
                    else
                    {
                        <img src="images/default-league.png" width="30" />
                    }
                    @leagueGroup.Key.Name (@leagueGroup.Key.Country)
                </h2>

               <table class="table">
    <thead>
        <tr>
            <th>Heure</th>
            <th>Match</th>
            <th>Score</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var match in leagueGroup)
        {
            <tr>
                <td>
                    @if (match.Fixture.Date == "Full-Time")
                    {
                        <!-- Full-time en rouge, gras -->
                        <span style="color: red; font-weight: bold; background-color: #ffcccc;">Full-Time</span>
                    }
                    else if (match.Fixture.Date == "Half-Time")
                    {
                        <!-- Half-time en bleu, gras -->
                        <span style="color: blue; font-weight: bold;background-color: #ccccff; padding: 4px;">Half-Time</span>
                    }
                    else if (match.Fixture.Date.EndsWith("'"))
                    {
                        <!-- minute en direct en vert, gras -->
                        <span style="color: green; font-weight: bold;background-color: #ccffcc; padding: 4px;">@match.Fixture.Date</span>
                    }
                    else
                    {
                        <!-- Heure "normale" -->
                        @match.Fixture.Date
                    }
                </td>

                <!-- Colonne Match -->
                <td>
                    <img src="@match.Teams.Home.Logo" width="20" />
                    @match.Teams.Home.Name
                    vs
                    @match.Teams.Away.Name
                    <img src="@match.Teams.Away.Logo" width="20" />
                </td>

                <!-- Colonne Score -->
                <td>
                   <span style="@( (match.Fixture.Status.Short == "1H" || match.Fixture.Status.Short == "2H") ? "color: green; font-weight: bold;background-color: #ccffcc; padding: 4px;" : "" )">
                       
                       @(match.Goals.Home ?? 0) - @(match.Goals.Away ?? 0)
    </span>
                </td>
            </tr>
        }
    </tbody>
</table>

            }
        }
    </div>

@code {
    // cache qui stocke les matchs
    private Dictionary<string, List<footApi.Services.Match>> matchCache = new();
    private List<footApi.Services.Match> matches = new();
    private List<footApi.Services.Match> filteredMatches = new();
    private bool showLiveMatches = false;
    private bool showTodayMatches = true;
    private DateTime selectedDate = DateTime.UtcNow;
    private string currentDateText = "";
    private string selectedCategory = "All";
   

    protected override async Task OnInitializedAsync()
    {
        await LoadTodayMatches();
        _ = RefreshTimeAsync();
    }

    private async Task RefreshTimeAsync()
    {
        while (true)
        {
            await Task.Delay(TimeSpan.FromMinutes(5));
            Console.WriteLine("Timer: Actualisation des matchs d'aujourd'hui");
            await LoadTodayMatches();
        }
    }

    private async Task PreviousDay()
    {
        if (selectedDate.Date == DateTime.UtcNow.Date)
        {
            selectedDate = selectedDate.AddDays(-1);
            UpdateDateText();
            await LoadMatchesForSelectedDate();
            StateHasChanged();
        }
    }

    private async Task NextDay()
    {
        if (selectedDate.Date == DateTime.UtcNow.Date)
        {
            selectedDate = selectedDate.AddDays(1);
            UpdateDateText();
            await LoadMatchesForSelectedDate();
            StateHasChanged();
        }
    }

    private void UpdateDateText()
    {
        if (selectedDate.Date == DateTime.UtcNow.Date)
            currentDateText = "";
        else if (selectedDate.Date == DateTime.UtcNow.Date.AddDays(-1))
            currentDateText = "Yesterday";
        else if (selectedDate.Date == DateTime.UtcNow.Date.AddDays(1))
            currentDateText = "Tomorrow";
        else
            currentDateText = selectedDate.ToString("dd MMM yyyy", CultureInfo.InvariantCulture);
    }

    private async Task LoadMatchesForSelectedDate()
    {
        string dateKey = selectedDate.ToString("yyyy-MM-dd");
        if (matchCache.ContainsKey(dateKey))
        {
            Console.WriteLine($"Utilisation du cache pour la date {dateKey}");
            matches = matchCache[dateKey];
        }
        else
        {
            Console.WriteLine($"Chargement des matchs pour {selectedDate:yyyy-MM-dd}...");
            matches = await FootService.GetMatchesByDateAsync(selectedDate);
            if (matches == null || matches.Count == 0)
            {
                Console.WriteLine("Aucun match trouvé pour cette date !");
                matches = new List<footApi.Services.Match>();
            }
            else
            {
                matchCache[dateKey] = matches;
            }
        }
        ApplyFilters();
        StateHasChanged();
    }

    private async Task LoadTodayMatches()
    {
        selectedDate = DateTime.UtcNow;
        UpdateDateText();
        Console.WriteLine("chargement matchs du jour...");

        matches = await FootService.GetTodayMatchesAsync();
        if (matches == null || matches.Count == 0)
        {
            Console.WriteLine("Aucun match trouvé pour cette date !");
            matches = new List<footApi.Services.Match>();
        }
        ApplyFilters();
        StateHasChanged();
        showTodayMatches = true;
        showLiveMatches = false;
    }

    private async Task LoadLiveMatches()
    {
        Console.WriteLine("chargement des matchs en direct..");

        matches = await FootService.GetLiveMatchesAsync();
        if (matches == null || matches.Count == 0)
        {
            Console.WriteLine(" Aucun match trouvé pour cette date !");
            matches = new List<footApi.Services.Match>();
        }
        ApplyFilters();
        StateHasChanged();
        showTodayMatches = false;
        showLiveMatches = true;
        StateHasChanged();
    }

    private void ShowAllMatches()
    {
        selectedCategory = "All";
        ApplyFilters();
        StateHasChanged();
    }

    private void ShowFemaleMatches()
    {
        selectedCategory = "Female";
        ApplyFilters();
        StateHasChanged();
    }

    private void ShowMaleMatches()
    {
        selectedCategory = "Male";
        ApplyFilters();
        StateHasChanged();
    }

    private void ApplyFilters()
    {
        if (matches == null || matches.Count == 0)
        {
            filteredMatches = new List<footApi.Services.Match>();
            StateHasChanged();
            return;
        }

        List<footApi.Services.Match> filtered = new(matches);

        if (selectedCategory == "Female")
        {
            filtered = filtered.Where(m =>
                m.League.Name.ToLower().Contains("women") ||
                m.League.Name.ToLower().Contains("feminine") ||
                m.League.Name.ToLower().Contains("w.") ||
                m.League.Name.ToLower().Contains("ladies") ||
                m.League.Name.ToLower().Contains("fem")
            ).ToList();
        }
        else if (selectedCategory == "Male")
        {
            filtered = filtered.Where(m =>
                !m.League.Name.ToLower().Contains("women") &&
                !m.League.Name.ToLower().Contains("feminine") &&
                !m.League.Name.ToLower().Contains("w.") &&
                !m.League.Name.ToLower().Contains("ladies") &&
                !m.League.Name.ToLower().Contains("fem")
            ).ToList();
        }

        filteredMatches = filtered;
        StateHasChanged();
    }
}
