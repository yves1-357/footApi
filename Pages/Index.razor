@page "/"
@using footApi.Services
@inject FootService FootService
@using System.Threading.Tasks;
@using System.Collections.Generic;
@using System.Globalization


<h1>Le Onze</h1>
<!-- naviguer des jours -->
<div class="date-navigation">
    <button @onclick="PreviousDay" class="btn btn-outline-secondary">
        <img src="wwwroot/icons/prev-calendar.png" width="20" />
    </button>
    
    <span class="selected-date">
        @currentDateText
    </span>
    
    <button @onclick="NextDay" class="btn btn-outline-secondary">
        <img src="wwwroot/icons/next-calendar.png" width="20" />
    </button>

    <!-- Boutons Today et Live -->
    <button @onclick="LoadTodayMatches" class="btn @(showTodayMatches ? "btn-primary" : "btn-outline-primary")">
        Today
    </button>

    <button @onclick="LoadLiveMatches" class="btn @(showLiveMatches ? "btn-danger" : "btn-outline-danger")">
        Live
    </button>
</div>
<!-- Filtrage par genre -->
<div class="filters">

        <button @onclick="ShowAllMatches" class="btn @(selectedCategory == "All" ? "btn-dark": "btn-outline-dark")">
            Tout 
        </button>
        <button @onclick="ShowFemaleMatches" class="btn @(selectedCategory == "Female" ? "btn-danger" : "btn-outline-danger")">
        Femmes
        </button>
        <button @onclick="ShowMaleMatches" class="btn @(selectedCategory == "Male" ? "btn-primary" : "btn-outline-primary")">
        Hommes
        </button>
</div>

@if (matches == null)
{
    <p>Chargement des matchs...</p>
}
else
{
    <!-- On groupe les matchs par ligue -->
    @foreach (var leagueGroup in matches.GroupBy(m => new {m.League.Name,m.League.Country,m.League.Logo}))
    {
        
        <h2>
            @if (!string.IsNullOrEmpty(leagueGroup.Key.Logo))
            {
                <img src="@leagueGroup.Key.Logo"width="30"/>
            }
            else
            {
                <img src="images/default-league.png" width="30" />
            }
            @leagueGroup.Key.Name (@leagueGroup.Key.Country)
        </h2>

        <table class="table table-striped">
            <thead>
            <tr>
                <th>Heure</th>
                <th>Match</th>
                <th>Score</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var match in leagueGroup.ToList())
            {
                <tr>
                    <td>
                        @match.Fixture.Date
                    </td>
                    <td>
                        <img src="@match.Teams.Home.Logo" width="20"/> @match.Teams.Home.Name
                        vs
                        @match.Teams.Away.Name <img src="@match.Teams.Away.Logo" width="20"/>
                    </td>
                    <td>@(match.Goals.Home ?? 0) - @(match.Goals.Away ?? 0)</td>
                </tr>
            }
            </tbody>
        </table>
        
    }
}
@code {

    private List<footApi.Services.Match> matches;
    private bool showLiveMatches = false;
    private bool showTodayMatches = true;
    private DateTime selectedDate = DateTime.UtcNow;
    private string currentDateText = "Today";
    private string selectedCategory = "All"; // "All", "Female", "Male"
    
    protected override async Task OnInitializedAsync()
    {
        await LoadTodayMatches(); // au demarage d'abbord les matchs du jour 
    }

    private async Task PreviousDay()
    {
        if ((DateTime.UtcNow - selectedDate).Days < 15)
        {
            selectedDate = selectedDate.AddDays(-1);
            UpdateDateText();
            await LoadMatchesForSelectedDate();
        }
    }
    private async Task NextDay()
    {
        if ((selectedDate - DateTime.UtcNow).Days < 15)
        {
            selectedDate = selectedDate.AddDays(1);
            UpdateDateText();
            await LoadMatchesForSelectedDate();
        }
    }
    private  void UpdateDateText()
    {
        if (selectedDate.Date == DateTime.UtcNow.Date)
        {
            currentDateText = "Today";
        } 
        else if (selectedDate.Date == DateTime.UtcNow.Date.AddDays(-1))
        {
            currentDateText = "Yesterday";
        }
        else if (selectedDate.Date == DateTime.UtcNow.Date.AddDays(1))
        {
            currentDateText = "Tomorrow";
        }
        else
        {
            currentDateText = selectedDate.ToString("dd MMM yyyy", CultureInfo.InvariantCulture);
        }
    }

    private async Task LoadMatchesForSelectedDate()
    {
        Console.WriteLine($"Chargement des matchs pour {selectedDate:yyyy-MM-dd}...");
        matches = await FootService.GetMatchesByDateAsync(selectedDate);
        StateHasChanged();
    }
    
    private async Task LoadTodayMatches()
    {
        selectedDate = DateTime.UtcNow;
        UpdateDateText();
        Console.WriteLine("chargement matchs du jour...");
        matches = await FootService.GetTodayMatchesAsync();
        showTodayMatches = true;
        showLiveMatches = false;
        StateHasChanged();

    }

    private async Task LoadLiveMatches()
    {
        Console.WriteLine("chargement des matchs en direct..");
        matches = await FootService.GetLiveMatchesAsync();
        showTodayMatches = false;
        showLiveMatches = true;
        StateHasChanged();
    }

    private void ShowAllMatches()
    {
        selectedCategory = "All";
        UpdateMatchDisplay();
    }
    private void ShowFemaleMatches()
    {
        selectedCategory = "Female";
        UpdateMatchDisplay();
    }
    private void ShowMaleMatches()
    {
        selectedCategory = "Male";
        UpdateMatchDisplay();
    }
    
    private void UpdateMatchDisplay()
    {
        StateHasChanged();
    }
    
    private async Task ToggleLiveMatches()
    {
        showLiveMatches = !showLiveMatches;
        if (showLiveMatches)
            await LoadLiveMatches();
        else 
            await LoadTodayMatches();
    }

}
